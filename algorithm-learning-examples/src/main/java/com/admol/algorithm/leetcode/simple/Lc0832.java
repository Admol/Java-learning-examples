package com.admol.algorithm.leetcode.simple;

/**
 * 标签:数组
 * 翻转图像
 * 给定一个二进制矩阵 A，我们想先水平翻转图像，然后反转图像并返回结果。
 *
 * 水平翻转图片就是将图片的每一行都进行翻转，即逆序。例如，水平翻转 [1, 1, 0] 的结果是 [0, 1, 1]。
 *
 * 反转图片的意思是图片中的 0 全部被 1 替换， 1 全部被 0 替换。例如，反转 [0, 1, 1] 的结果是 [1, 0, 0]。
 *
 * 示例 1:
 *
 * 输入: [[1,1,0],[1,0,1],[0,0,0]]
 * 输出: [[1,0,0],[0,1,0],[1,1,1]]
 * 解释: 首先翻转每一行: [[0,1,1],[1,0,1],[0,0,0]]；
 *      然后反转图片: [[1,0,0],[0,1,0],[1,1,1]]
 * 示例 2:
 *
 * 输入: [[1,1,0,0],[1,0,0,1],[0,1,1,1],[1,0,1,0]]
 * 输出: [[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]]
 * 解释: 首先翻转每一行: [[0,0,1,1],[1,0,0,1],[1,1,1,0],[0,1,0,1]]；
 *      然后反转图片: [[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]]
 * 说明:
 *
 * 1 <= A.length = A[0].length <= 20
 * 0 <= A[i][j] <= 1
 *
 * 链接：https://leetcode-cn.com/problems/flipping-an-image
 * @author : admol
 * @Date : 2020/7/23
 */
public class Lc0832{

    /**
     * @param A
     * @return
     */
    public static int[][] flipAndInvertImage(int[][] A) {
        // 列
        int c = A[0].length;
        // 1.遍历每一行
        for(int[] row : A){
            // 2.翻转每一行,
            for(int i = 0; i < (c+1)/2; i++){
                // 翻转的时候首位交换就可以了, 即i和 r-1-i交换就是翻转, 翻转的同时可以取反
                // 异或: 相同为0, 不同为1, 0 ^ 1 = 1;  1 ^ 1 = 0;
                int temp = row[i] ^ 1;
                row[i] = row[c-1-i] ^ 1;
                row[c-1-i] = temp;
            }
        }
        return A;
    }

    public static void main(String[] args){
        System.out.println(flipAndInvertImage(new int[][]{
                {1,1,0},{1,0,1},{0,0,0}
        }));
    }
}
