package com.admol.algorithm.leetcode.simple.math;

/**
 * Nim 游戏
 * 你和你的朋友，两个人一起玩 Nim 游戏：桌子上有一堆石头，每次你们轮流拿掉 1 - 3 块石头。 拿掉最后一块石头的人就是获胜者。你作为先手。
 * 你们是聪明人，每一步都是最优解。 编写一个函数，来判断你是否可以在给定石头数量的情况下赢得游戏。
 * 示例:
 * 输入: 4
 * 输出: false
 * 解释: 如果堆中有 4 块石头，那么你永远不会赢得比赛；
 *      因为无论你拿走 1 块、2 块 还是 3 块石头，最后一块石头总是会被你的朋友拿走。
 * 链接：https://leetcode-cn.com/problems/nim-game
 * @author : admol
 * @Date : 2020/7/8
 */
public class Lc0292{
    /**
     * 看题目意思应该是你先手, 朋友后手
     * 1.小于4, 你全部拿走, 你赢
     * 2.如果堆中有 4 块石头，那么你永远不会赢得比赛； 因为无论你拿走 1 块、2 块 还是 3 块石头，最后一块石头总是会被你的朋友拿走。
     * 5.如果有5块, 你总是可以赢: 你拿1, 对手可以拿1,2,3, 你分别可以拿,3,2,1;
     * 5.如果有6块, 你总是可以赢: 你拿2, 对手可以拿1,2,3, 你分别可以拿,3,2,1;
     * 5.如果有7块, 你总是可以赢: 你拿3, 对手可以拿1,2,3, 你分别可以拿,3,2,1;
     * 5.如果有8块, 你永远不会赢; 原因同只有4块
     * 所以根据规律可以看出, 只要是4的整数倍, 先手永远不可能赢
     *
     * 这个题目和抢数30很像:
     * 甲、乙两名同学bai从1到30轮流连续报数，谁先报到30这个数，谁就获胜。但是，
     * 有个规定：每人每次最多报三个数，至少报一个数，每人报的每个数不得与自己报过的或对方报过的重复，也不得跳过任何一个数，
     * 要想取胜，就必须先抢到30。
     * 保证一个策略, 最后一次的时候总是给对手留下4个数字(27,28,29,30),你就必赢,也就是要抢下26,要抢到26就必要要抢到22;
     * 22->18->14->10->6->2, 这些数必须要抢到, 抢到了其中一个数之后,按照策略(n-m)进行报数;这里n为4,m为对手报的数;
     * 如果对手先报1,2, 他非常聪明的话, 你永远也赢不了, 他后面会把2-6-10-14-18-22-26-30,全部抢完,而且每次最后报的数都是这个
     * @param n
     * @return
     */
    public static boolean canWinNim(int n) {
        return n % 4 !=0;
    }

    public static void main(String[] args){
        System.out.println(canWinNim(4));
        System.out.println(canWinNim(5));
        System.out.println(canWinNim(6));
        System.out.println(canWinNim(7));
        System.out.println(canWinNim(8));
        System.out.println(canWinNim(28));
        System.out.println(canWinNim(30));
    }
}
